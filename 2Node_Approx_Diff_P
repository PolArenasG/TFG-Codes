import numpy as np

# Parámetros
T = 200         # Número de pasos de tiempo
K = 1000000     # Número de simulaciones
sigma = 0.1     # Desviación estándar
b = 0.1
c = 0.12
L0 = 0.1        # Valor inicial
theta = 0       # Sin decaimiento

# Función para calcular L_approx(t)
def L_approx(t, p):
    factor = sigma * ((1 - theta) ** t)
    
    term1 = (1 - p)**2 * np.random.normal(loc=L0, scale=factor * abs(L0))
    
    term2a = np.random.normal(loc=L0 + t * b, scale=factor * abs(L0 + t * b))
    term2b = np.random.normal(loc=L0 - t * c, scale=factor * abs(L0 - t * c))
    term2 = (1 - p) * p * (term2a + term2b)
    
    term3 = p**2 * np.random.normal(loc=L0 + t * (b - c), scale=factor * abs(L0 + t * (b - c)))

    return term1 + term2 + term3

# Calcular y mostrar varianzas para cada p
p_values = np.arange(0, 1.05, 0.05)
for p in p_values:
    N1_all_final = [L_approx(T, p) for _ in range(K)]
    mean = np.mean(N1_all_final)
    varianza = np.var(N1_all_final)
    print(f"p = {p:.2f}, varianza final = {varianza:.6f}, mean = {mean:.6f}")
